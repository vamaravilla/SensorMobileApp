package com.team123.tensorflow;

import android.os.Environment;
import android.util.Log;

import org.tensorflow.lite.Interpreter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.nio.MappedByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Estimate {

    private Interpreter tfLiteInterpreter;
    private String PATH_SSD = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS) + "/Team123/";
    private String PATH = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS) + "/Team123/";
    //private double[] mins = getMin();
    //private double[] maxs = getMax();
    private String currentAccuracy;
    private String[] labels = new String[]{"WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LYING"};

    public String getCurrentAccuracy(){
        return currentAccuracy;
    }

    public  ArrayList<ArrayList<String>> EstimateHA(FeatureData data){
        String modelFilePath = PATH + "MODELO_881.tflite";
        //String testFilePath = PATH + "testData952.csv";
        //String labelsFilePath = PATH + "LABELS95.txt";
        File file = new File(modelFilePath);
        if(!file.exists()) {
            modelFilePath = PATH_SSD + "MODELO_881.tflite";
        }
        try {
            ArrayList<ArrayList<String>> resultData = estimate(modelFilePath, data);
            return resultData;
        } catch(IOException ex) {
            Log.e("TFSKLITETESTER", Log.getStackTraceString(ex));
            return new ArrayList<ArrayList<String>>();
        }
    }

    public ArrayList<ArrayList<String>> estimate(String modelFilePath, FeatureData data)
            throws IOException {
        return estimateDNN(modelFilePath, data);
    }


    private ArrayList<ArrayList<String>> estimateDNN(String modelFilePath, FeatureData featureData)
            throws IOException {
        try {
            tfLiteInterpreter = new Interpreter(loadModelFile(modelFilePath));
        } catch (IOException e){
            e.printStackTrace();
        }

        FeatureData dataTest = featureData; //extractData(testFilePath);

        //ArrayList<Integer> output = runTensorFlow_new(dataTest.getFeatures(),dataTest.getNumSamples(),dataTest.getNumTypes(),dataTest.getNumFeatures());
        ArrayList<Integer> output = runTensorFlow_new(dataTest.getFeatures(),dataTest.getNumSamples(),6,dataTest.getNumFeatures());


        //ArrayList<Integer> expectedList = new ArrayList<Integer>();
        //for (int i : dataTest.getTypes())
        //{
        //    expectedList.add(i);
        //}
        //return packResults(expectedList, output, dataTest.getNumTypes());
        return packResults2(output);
    }

    /*private String[] getNLabels(int numLabels) {
        String[] labels = new String[numLabels];

        for (int i = 0; i < numLabels; i++) {
            labels[i] = Integer.toString(i);
        }

        return labels;
    }

    private String[] getLabelsFromFile(String labelsFilePath) throws IOException {
        InputStream stream = new FileInputStream(labelsFilePath);
        BufferedReader br = new BufferedReader(new InputStreamReader(stream));
        String str;

        List<String> list = new ArrayList<String>();
        while((str = br.readLine()) != null){
            if (str.isEmpty()) {
                // Ignore empty lines
                continue;
            }
            list.add(str);
        }

        return list.toArray(new String[0]);
    }*/

    private ArrayList<ArrayList<String>> packResults(List<Integer> expected, List<Integer> output, int labelNum)
            throws IOException {
        double accuracy = compareArrays(expected, output);
        boolean numberLabels = false;
        String accuracyvalue = "";

        /*
         String[] labels;
        if(labelsFilePath != null && !labelsFilePath.trim().isEmpty()) {
            labels = getLabelsFromFile(labelsFilePath);
        } else {
            labels = getNLabels(labelNum);
            numberLabels = true;
        }
        */

        ArrayList<ArrayList<String>> results = new ArrayList<ArrayList<String>>();

        // Add accuracy
        ArrayList<String> accItem = new ArrayList<>();
        System.out.println("--------------------------------ACCURACY-----------------------------------");

        accuracyvalue = String.format("%.4f", accuracy);
        currentAccuracy =accuracyvalue;
        accItem.add(accuracyvalue.replace(",","."));
        accItem.add(Boolean.toString(numberLabels));
        results.add(accItem);

        // Add results
        for (int i = 0; i < expected.size(); i++) {
            ArrayList<String> item = new ArrayList<>();
            Integer expectedValue = expected.get(i);
            Integer outputValue = output.get(i);
            item.add(expectedValue.toString());
            item.add(labels[expectedValue.intValue()-1]); //-1
            item.add(outputValue.toString());
            item.add(labels[outputValue.intValue()-1]);
            results.add(item);
        }

        return results;
    }

    private ArrayList<ArrayList<String>> packResults2(List<Integer> output)
            throws IOException {

        ArrayList<ArrayList<String>> results = new ArrayList<ArrayList<String>>();

        // Add results
        for (int i = 0; i < output.size(); i++) {
            ArrayList<String> item = new ArrayList<>();
            Integer outputValue = output.get(i);
            item.add(outputValue.toString());
            item.add(labels[outputValue.intValue()-1]);
            results.add(item);
        }

        return results;
    }

    private double compareArrays(List<Integer> array1, List<Integer> array2) {
        Integer sameValue = 0;

        if (array1 != null && array2 != null){
            if (array1.size() != array2.size())
                sameValue = -1;
            else
                for (int i = 0; i < array2.size(); i++) {
                    int output =array2.get(i);
                    int test =array1.get(i);
                    if (array2.get(i).equals(array1.get(i))) {
                        sameValue++;
                    }
                }
        }else{
            sameValue = -1;
        }
        return (sameValue*1.0/ array2.size())*100;

    }


    private double[] getMin(){
        Scanner inputStream = null;
        try
        {
            String fileName = PATH + "min_max.csv";
            File file = new File(fileName);

            // we don't know the amount of data ahead of time so we use lists
            List<Double> col1 = new ArrayList<>();
            List<Double> col2 = new ArrayList<>();

            inputStream = new Scanner(file);
            while (inputStream.hasNext())
            {
                String data = inputStream.next();
                String [] arr = data.split(",");

                col1.add(Double.parseDouble(arr[0]));
                col2.add(Double.parseDouble(arr[1]));
            }

            // Covert the lists to double arrays
            double[] column1 = new double[col1.size()];
            double[] column2 = new double[col2.size()];

            for (int i = 0; i < col1.size(); i++)
            {
                column1[i] = col1.get(i);
            }

            for (int i = 0; i < col2.size(); i++)
            {
                column2[i] = col2.get(i);
            }

            // print out just for verification
            System.out.println(Arrays.toString(column1));
            System.out.println(Arrays.toString(column2));
            return column1;
        }
        catch (IOException e)
        {
            e.printStackTrace();
            return null;
        }
        finally
        {
            if (inputStream != null)
            {
                inputStream.close();
            }
        }

    }

    private double[] getMax(){
        Scanner inputStream = null;
        try
        {
            String fileName = PATH + "min_max.csv";
            File file = new File(fileName);

            // we don't know the amount of data ahead of time so we use lists
            List<Double> col1 = new ArrayList<>();
            List<Double> col2 = new ArrayList<>();

            inputStream = new Scanner(file);
            while (inputStream.hasNext())
            {
                String data = inputStream.next();
                String [] arr = data.split(",");

                col1.add(Double.parseDouble(arr[0]));
                col2.add(Double.parseDouble(arr[1]));
            }

            // Covert the lists to double arrays
            double[] column1 = new double[col1.size()];
            double[] column2 = new double[col2.size()];

            for (int i = 0; i < col1.size(); i++)
            {
                column1[i] = col1.get(i);
            }

            for (int i = 0; i < col2.size(); i++)
            {
                column2[i] = col2.get(i);
            }

            // print out just for verification
            System.out.println(Arrays.toString(column1));
            System.out.println(Arrays.toString(column2));
            return column2;
        }
        catch (IOException e)
        {
            e.printStackTrace();
            return null;
        }
        finally
        {
            if (inputStream != null)
            {
                inputStream.close();
            }
        }

    }

    private ArrayList<Integer> runTensorFlow_new(double[][] input,int numSamples,int numTypes,int numFeatures) {
        float[][] outputValue = new float[numSamples][numTypes]; //numTypes tiene que ser el numero de posibles labels entre las cuales se puede elegir
        ArrayList<Integer> output = new ArrayList<>();

        float[][] floatmatrix = new float[numSamples][numFeatures];
        for (int w = 0; numSamples > w; w++) {
            for (int h = 0; numFeatures > h; h++) {
                //floatmatrix[w][h] = (float)(((input[w][h] - mins[h]) / (float)(maxs[h]-mins[h])) * 2 - 1);
                floatmatrix[w][h] = (float)input[w][h];
            }
        }

        tfLiteInterpreter.run(floatmatrix,outputValue);

        for (int k=0; k < numSamples; k++){

            float[] outputs = outputValue[k];
            int max = 0;
            for (int m=0; m < outputs.length; m++){

                if (outputs[m] > outputs[max]){
                    max = m;
                }
            }

            max++;
            output.add(max);

        }

        return output;

    }

    public FeatureData extractFeaturesData(String values){
        FeatureData result = new FeatureData();
        String delimiter = ",";
        int count = 1;
        int commas = 580;

            //values="0.234419465,-0.296051502,0.432648242,-0.991443098,-0.996769607,-0.992607415,-0.99138397,-0.997448921,-0.984132349,-0.989186525,-0.99520582,-0.980683267,0.992393255,0.992293298,0.992376685,-0.993309855,-0.99987942,-0.999983311,-0.999934018,-0.99295187,-0.99737674,-0.994911194,0.362503588,0.575930476,0.331854731,0.152902126,-0.135982141,0.097607881,-0.186178893,-0.252368897,0.559735835,-0.400508225,-0.142188713,-0.177042961,0.259247839,-0.055437494,-0.327930957,-0.055974416,-0.170221448,0.002639777,0.091922879,0.000427553,-0.512704492,-0.993327916,-0.997248232,-0.986886144,-0.996122479,-0.998161137,-0.990160942,-0.990300238,-0.995984793,-0.978385866,0.99186933,0.995308816,0.986582518,-0.996095955,-0.999893606,-0.999990523,-0.999750435,-0.996928811,-0.997867227,-0.990260065,0.684321582,0.292994261,0.265759945,0.335808009,0.119647056,0.127271682,0.449463338,-0.458754718,0.682413161,-0.470407903,0.332741767,0.003947027,0.424193174,0.181132257,-0.130893156,-0.093944959,-0.025504975,-0.003639772,-0.039623372,-0.288735896,-0.100949161,-0.986204922,-0.989859045,-0.988858581,-0.984428346,-0.989226222,-0.990976155,-0.992293537,-0.988702297,-0.988933504,0.97842896,0.992015362,0.987930894,-0.987042308,-0.999814451,-0.999930322,-0.999905407,-0.983983755,-0.990237832,-0.990154922,0.544326365,0.643032551,0.677276731,-0.091385663,0.152760565,0.116421796,0.258757979,-0.276771843,-0.056197572,0.016070727,0.086264908,-0.222343802,0.188248694,-0.062922664,0.249722779,-0.210188597,-0.662854135,0.296738535,-0.10213533,0.010487822,-0.142289534,-0.989727199,-0.986008048,-0.991098404,-0.991066337,-0.987951338,-0.992089391,-0.986980557,-0.985555053,-0.990243137,0.988947988,0.986352921,0.987289727,-0.988614917,-0.999893665,-0.999865532,-0.999934256,-0.991196573,-0.988482237,-0.991304874,0.559345007,0.697633624,0.792635977,-0.203273371,0.013390976,-0.06065527,0.034232687,-0.061498865,0.017021175,0.059565172,-0.191894755,-0.228957325,0.197106615,-0.104451016,-0.257240862,-0.189997092,-0.372119665,0.586097658,-0.99370724,-0.992469668,-0.996078849,-0.987605572,-0.99545759,-0.99370724,-0.99993211,-0.995640099,0.75908494,-0.087759562,0.054887518,-0.05734596,-0.283225417,-0.996568501,-0.996314704,-0.996882021,-0.993433535,-0.992342055,-0.996568501,-0.999979377,-0.997010589,0.656153262,0.30892092,-0.373626828,0.170751438,0.164508313,-0.988006711,-0.99174279,-0.986741662,-0.99301964,-0.989691317,-0.988006711,-0.99989742,-0.989281416,0.791739583,0.035526861,-0.099109143,-0.137483016,-0.027266113,-0.988258779,-0.98673588,-0.98901391,-0.987824321,-0.985126615,-0.988258779,-0.999844491,-0.986624897,0.802986205,0.011522319,0.07442902,-0.206870437,-0.038283087,-0.992277384,-0.996265113,-0.988972545,-0.990648031,-0.997016251,-0.993214309,-0.98798728,-0.995903671,-0.983392477,-0.989912033,-0.997787952,-0.994528115,-0.99876821,-0.999883413,-0.996765971,-0.993010163,-0.99987942,-0.999983311,-0.999934018,-0.992016375,-0.995104313,-0.98128593,0.262570858,0.596529543,0.35081929,-0.92592591,0.172413796,-1,0.947704613,0.993649364,0.852404177,-0.434171021,-0.690379202,-0.662951767,-0.899492681,-0.453247279,-0.775288939,-0.999945104,-0.999939024,-0.999946952,-0.99999243,-0.999956667,-0.999982536,-0.99998194,-0.999995589,-0.999938548,-0.999979854,-0.999970973,-0.999981761,-0.999927282,-0.999988794,-0.999945104,-0.999939024,-0.999946952,-0.99999243,-0.999956667,-0.999982536,-0.99998194,-0.999995589,-0.999938548,-0.999979854,-0.999970973,-0.999981761,-0.999927282,-0.999988794,-0.999945104,-0.999939024,-0.999946952,-0.99999243,-0.999956667,-0.999982536,-0.99998194,-0.999995589,-0.999938548,-0.999979854,-0.999970973,-0.999981761,-0.999927282,-0.999988794,-0.993751168,-0.996827185,-0.985485196,-0.991602004,-0.997444987,-0.989176273,-0.989312887,-0.994045377,-0.981831133,-0.993839443,-0.997673273,-0.994481027,-0.999558151,-0.997548759,-0.981116712,-0.995121241,-0.999893606,-0.999990523,-0.999750435,-0.990384817,-0.995365202,-0.986283004,-0.198441729,0.067841344,0.538019359,-0.106382981,0.021276595,0.375,0.983501494,0.901919127,0.544356287,-0.535097897,-0.867160499,-0.479491532,-0.742491126,-0.660151899,-0.935388267,-0.999693155,-0.999949276,-0.999942124,-0.999992251,-0.999953091,-0.999981999,-0.999982774,-0.999967694,-0.999929428,-0.999984741,-0.999966025,-0.999982178,-0.999926209,-0.999986708,-0.999693155,-0.999949276,-0.999942124,-0.999992251,-0.999953091,-0.999981999,-0.999982774,-0.999967694,-0.999929428,-0.999984741,-0.999966025,-0.999982178,-0.999926209,-0.999986708,-0.999693155,-0.999949276,-0.999942124,-0.999992251,-0.999953091,-0.999981999,-0.999982774,-0.999967694,-0.999929428,-0.999984741,-0.999966025,-0.999982178,-0.999926209,-0.999986708,-0.98614502,-0.98998642,-0.988312423,-0.986223817,-0.98976022,-0.989529431,-0.988865018,-0.98406297,-0.991029799,-0.988123178,-0.993516862,-0.99258548,-0.994901359,-0.994914055,-0.997550428,-0.988009453,-0.999814451,-0.999930322,-0.999905407,-0.981326222,-0.986847281,-0.99020493,0.352296829,0.138107389,0.25271681,0.130434781,-0.787234068,-0.481481493,0.614406049,0.765425801,0.390273869,-0.550895393,-0.836647451,-0.486275822,-0.798711658,-0.54806906,-0.820436537,-0.999919891,-0.999871254,-0.999949753,-0.999823451,-0.999914348,-0.999887049,-0.999964178,-0.999978542,-0.999898136,-0.999912441,-0.99989146,-0.999968052,-0.999901772,-0.999845088,-0.999919891,-0.999871254,-0.999949753,-0.999823451,-0.999914348,-0.999887049,-0.999964178,-0.999978542,-0.999898136,-0.999912441,-0.99989146,-0.999968052,-0.999901772,-0.999845088,-0.999919891,-0.999871254,-0.999949753,-0.999823451,-0.999914348,-0.999887049,-0.999964178,-0.999978542,-0.999898136,-0.999912441,-0.99989146,-0.999968052,-0.999901772,-0.999845088,-0.989464462,-0.986662686,-0.989622235,-0.989897072,-0.987247229,-0.992602408,-0.989565134,-0.984089911,-0.990774512,-0.990214825,-0.991402864,-0.99466145,-0.990872085,-0.991728008,-0.983950853,-0.987465024,-0.999893665,-0.999865532,-0.999934256,-0.989463449,-0.983359218,-0.992156625,-0.167845398,0.093604341,0.34176746,-0.521739125,-0.51111114,0.130434781,0.81082654,0.667011082,0.577244401,-0.397084743,-0.755002677,-0.501169026,-0.899075866,-0.40275535,-0.761069596,-0.999912977,-0.999805927,-0.999940872,-0.999823749,-0.99991709,-0.999887109,-0.999970555,-0.999967217,-0.999805033,-0.999877632,-0.999879062,-0.999969423,-0.999872267,-0.999834776,-0.999912977,-0.999805927,-0.999940872,-0.999823749,-0.99991709,-0.999887109,-0.999970555,-0.999967217,-0.999805033,-0.999877632,-0.999879062,-0.999969423,-0.999872267,-0.999834776,-0.999912977,-0.999805927,-0.999940872,-0.999823749,-0.99991709,-0.999887109,-0.999970555,-0.999967217,-0.999805033,-0.999877632,-0.999879062,-0.999969423,-0.999872267,-0.999834776,-0.992561996,-0.993612349,-0.990185678,-0.99370724,-0.997697353,-0.992561996,-0.99993211,-0.990006566,0.707569778,-0.90476191,0.885348022,0.709458888,0.701884985,-0.995833457,-0.996807992,-0.996739328,-0.996568501,-0.990304112,-0.995833457,-0.999979377,-0.995821714,0.247831732,1,-0.089936353,0.65266186,0.636623859,-0.99083668,-0.988809228,-0.986805916,-0.988006711,-0.997165203,-0.99083668,-0.99989742,-0.990674496,0.209272966,-1,0.585569382,0.611593306,0.592328191,-0.986557722,-0.987962008,-0.980968237,-0.988258779,-0.994950294,-0.986557722,-0.999844491,-0.985334635,-0.117107064,0.023622047,0.669576228,0.641731799,0.607584298";

            //values="0.061865952,-0.156022266,0.385778189,-0.325878024,-0.632111013,-0.75826782,-0.189980611,-0.676706731,-0.505096793,-0.428994924,-0.522758484,-0.723556221,0.576958537,0.640100062,0.72155112,-0.478316993,-0.768368304,-0.931261361,-0.969669998,-0.24012281,-0.672214746,-0.818018675,0.575654507,0.710033417,0.412252426,0.478648275,-0.355715513,0.153890431,0.327930897,0.656588793,0.065670751,0.587580144,0.389439285,0.302191734,0.253534436,0.383303612,0.430836022,-0.194899008,0.201186076,-0.276016325,0.167858362,-0.091706045,-0.588944077,-0.172629714,-0.712043643,-0.260695308,-0.013545578,-0.653940618,-0.369791567,-0.199318603,-0.745032728,-0.653445721,0.431972265,0.658548355,0.545916677,-0.528183579,-0.651715696,-0.958032429,-0.720857859,-0.036465693,-0.634579182,-0.316560447,0.766362369,0.70856452,0.712639272,0.427837998,-0.18005006,0.03836675,0.435606956,0.078858286,0.090098843,0.031722557,0.818799198,0.087684989,0.475161761,0.302345455,0.664027035,-0.372471958,0.581223369,-0.114920281,-0.02398338,-0.063339837,0.003006809,-0.586059272,-0.010080722,-0.49936235,-0.569245398,0.208262891,-0.628597677,-0.656484544,-0.21893397,-0.544009507,0.391127557,0.197298363,0.632139564,-0.08453165,-0.912161231,-0.509225428,-0.873576701,-0.564218342,0.149793968,-0.62680161,0.523424923,0.717336595,0.602545142,0.452895701,-0.171233207,0.283479989,0.11465656,-0.682688832,0.27564013,-0.210765123,0.434280187,-0.306117535,0.490063757,-0.462374657,0.510325074,0.214169294,-0.189850524,0.06227209,-0.169039711,-0.036880936,-0.155725971,-0.591132343,0.03472406,-0.498195112,-0.427305788,-0.005695644,-0.528958023,-0.626688659,-0.198074892,-0.576576114,0.627637386,-0.204106629,0.52895993,-0.193160012,-0.914708734,-0.464196771,-0.872999787,-0.447356224,-0.048022535,-0.513429344,0.907266855,0.6926772,0.805399656,0.364778191,0.115161397,0.291032761,0.417353451,-0.593060911,0.219240025,-0.471723795,0.316892147,-0.435566276,0.72160238,-0.577603042,0.100729458,-0.052937537,0.062094931,-0.096011162,-0.534816921,-0.648952186,-0.678776443,-0.518318713,-0.711759031,-0.534816921,-0.895519376,-0.710852325,0.88732481,0.595067143,-0.664795816,0.18135798,-0.56397903,-0.601671934,-0.747890055,-0.723778367,-0.655579984,-0.462913305,-0.601671934,-0.938051224,-0.753119349,0.830995977,0.303689688,0.053216312,0.064153828,-0.597518921,0.005704125,-0.184202597,0.151992172,-0.19290185,-0.491483122,0.005704125,-0.558591723,-0.020861739,0.684729338,-0.399704456,0.309753627,-0.078669913,-0.211332947,-0.148525745,-0.05443988,-0.174705774,0.197352067,-0.714607298,-0.148525745,-0.577450097,-0.184150979,0.803844035,-0.410195589,0.27448073,-0.003893903,-0.010653586,-0.191157684,-0.67761898,-0.617416501,-0.421881229,-0.621977031,-0.797729313,-0.099006243,-0.732623398,-0.468586355,-0.374117762,-0.586028159,-0.820149422,-0.937898099,-0.909512758,-0.961804271,-0.516209722,-0.768368304,-0.931261361,-0.969669998,-0.176755533,-0.735676169,-0.506185234,0.347111583,0.369746745,0.380478889,-0.407407403,0.172413796,-0.291666657,0.9648996,0.900743484,0.910812438,-0.257296622,-0.504797518,0.411365837,0.15165925,-0.11548999,-0.433362514,-0.986551642,-0.877041161,-0.725458384,-0.99284488,-0.937318802,-0.921476901,-0.947658122,-0.99653703,-0.965532303,-0.912169695,-0.930127263,-0.947644711,-0.892409563,-0.981772065,-0.986551642,-0.877041161,-0.725458384,-0.99284488,-0.937318802,-0.921476901,-0.947658122,-0.99653703,-0.965532303,-0.912169695,-0.930127263,-0.947644711,-0.892409563,-0.981772065,-0.986551642,-0.877041161,-0.725458384,-0.99284488,-0.937318802,-0.921476901,-0.947658122,-0.99653703,-0.965532303,-0.912169695,-0.930127263,-0.947644711,-0.892409563,-0.981772065,-0.147593826,-0.707094312,-0.31984064,-0.200659722,-0.716898263,-0.326166242,-0.219838589,-0.754652083,-0.339094222,-0.328817934,-0.709626377,-0.401994407,-0.706455112,-0.932503939,-0.598479092,-0.548208535,-0.651715696,-0.958032429,-0.720857859,-0.098197505,-0.722076416,-0.362214535,-0.194646582,-0.335870624,-0.124430872,-0.702127635,-0.319148928,-0.291666657,0.759914935,0.639816642,0.81810838,-0.438247532,-0.827476382,0.196478546,-0.118525825,-0.137556359,-0.528994143,-0.902926862,-0.900141835,-0.753796577,-0.992402792,-0.933058202,-0.918941081,-0.951594591,-0.970149755,-0.897157907,-0.949909747,-0.914908528,-0.952367127,-0.732084632,-0.974676847,-0.902926862,-0.900141835,-0.753796577,-0.992402792,-0.933058202,-0.918941081,-0.951594591,-0.970149755,-0.897157907,-0.949909747,-0.914908528,-0.952367127,-0.732084632,-0.974676847,-0.902926862,-0.900141835,-0.753796577,-0.992402792,-0.933058202,-0.918941081,-0.951594591,-0.970149755,-0.897157907,-0.949909747,-0.914908528,-0.952367127,-0.732084632,-0.974676847,-0.531267703,-0.243515685,-0.490318537,-0.630838215,0.119447201,-0.521410823,-0.445395708,-0.181117341,-0.557452857,-0.694494188,-0.04233354,-0.562645853,-0.956417024,-0.629398584,-0.644868791,-0.273538142,-0.912161231,-0.509225428,-0.873576701,-0.412504613,-0.383127987,-0.545669615,0.568829656,-0.352457285,0.174420863,-0.391304344,-0.659574449,-0.407407403,0.958412111,0.838681996,0.671116352,-0.768444359,-0.927083492,0.243341118,-0.159402192,-0.081210442,-0.323891222,-0.69901073,-0.29095307,-0.773674726,-0.770778894,-0.663261652,-0.802296221,-0.965169251,-0.981917202,-0.535273314,-0.747027814,-0.722840607,-0.969459951,-0.551239371,-0.723089337,-0.69901073,-0.29095307,-0.773674726,-0.770778894,-0.663261652,-0.802296221,-0.965169251,-0.981917202,-0.535273314,-0.747027814,-0.722840607,-0.969459951,-0.551239371,-0.723089337,-0.69901073,-0.29095307,-0.773674726,-0.770778894,-0.663261652,-0.802296221,-0.965169251,-0.981917202,-0.535273314,-0.747027814,-0.722840607,-0.969459951,-0.551239371,-0.723089337,-0.566130638,-0.116766557,-0.436923653,-0.619174123,0.059620477,-0.566689253,-0.547009528,-0.059124514,-0.618070841,-0.733188331,0.126570478,-0.73395282,-0.809957504,-0.647333205,-0.958985925,-0.22913906,-0.914708734,-0.464196771,-0.872999787,-0.515915334,-0.087241061,-0.488915712,-0.159430683,-0.261482209,-0.023846777,0.173913047,-0.777777791,0.086956523,0.814849317,0.733197033,0.501499474,-0.620672286,-0.930177987,0.430531949,0.114004664,-0.421301931,-0.792444885,-0.857944906,-0.330470681,-0.76477319,-0.777697086,-0.674621105,-0.808267772,-0.964812756,-0.937229276,-0.382579982,-0.727270663,-0.699897587,-0.962226987,-0.563439369,-0.689888537,-0.857944906,-0.330470681,-0.76477319,-0.777697086,-0.674621105,-0.808267772,-0.964812756,-0.937229276,-0.382579982,-0.727270663,-0.699897587,-0.962226987,-0.563439369,-0.689888537,-0.857944906,-0.330470681,-0.76477319,-0.777697086,-0.674621105,-0.808267772,-0.964812756,-0.937229276,-0.382579982,-0.727270663,-0.699897587,-0.962226987,-0.563439369,-0.689888537,-0.590088844,-0.5412696,-0.684135377,-0.534816921,-0.709795296,-0.590088844,-0.895519376,-0.695962429,0.636088908,0.714285731,0.689650774,0.928818703,0.926490843,-0.669134617,-0.64605391,-0.754263341,-0.601671934,-0.15796113,-0.669134617,-0.938051224,-0.770697355,0.019410903,0.984251976,0.575104892,0.880002499,0.873840749,-0.154188097,-0.033629864,-0.176178366,0.005704125,-0.612126827,-0.154188097,-0.558591723,0.018922552,0.095950939,-0.555555582,0.932304204,0.385544598,0.363633484,-0.011299102,-0.129615068,-0.236804694,-0.148525745,-0.166244432,-0.011299102,-0.577450097,-0.230022624,0.064612642,0.291338593,0.75760144,0.659394801,0.623938501";

        String[][] fxRates = new String[count][];
        double [][]tableFeature= new double[count][commas];
        fxRates[0] = values.split(delimiter);

        int [] type = new int [count];

        //Only one row
        for(int j=0; j<commas; j++) {
            tableFeature[0][j]= Double.parseDouble(fxRates[0][j]);
        }
        //type[0]=Integer.parseInt(fxRates[0][commas]);
        result.setFeatures(tableFeature);
        //result.setTypes(type);
        //result.setNumTypes(diffValues(type));
        result.setNumFeatures(commas);
        result.setNumSamples(count);
        return result;
    }


    private static FeatureData extractData(String filePath) throws IOException {
        FeatureData result = new FeatureData();
        int count = countF(filePath)-1;
        System.out.println(count);

        String[][] fxRates = new String[count][];
        String delimiter = ",";
        int index=0;
        int commas = 0;

        InputStream stream = new FileInputStream(filePath);
        BufferedReader br = new BufferedReader(new InputStreamReader(stream));
        String line;
        if ((line = br.readLine()) != null) {
            for(int i = 0; i < line.length(); i++) {
                if(line.charAt(i) == ',') commas++;
            }
        }
        while ((line = br.readLine()) != null) {
            fxRates[index++] = line.split(delimiter);
            System.out.println(fxRates[index-1][commas]);
        }
        br.close();

        int tableStringLength=fxRates.length;
        double [][]tableFeature= new double[count][commas];;
        int [] type = new int [count];
        for(int i=0; i<tableStringLength; i++) {
            for(int j=0; j<commas; j++) {
                tableFeature[i][j]= Double.parseDouble(fxRates[i][j]);
            }
            type[i]=Integer.parseInt(fxRates[i][commas]);
        }
        br.close();
        result.setFeatures(tableFeature);
        result.setTypes(type);
        result.setNumTypes(diffValues(type));
        result.setNumFeatures(commas);
        result.setNumSamples(count);
        return result;
    }

    public static int countF(String filename) throws IOException {
        int count=0;

        InputStream stream = new FileInputStream(filename);
        BufferedReader br = new BufferedReader(new InputStreamReader(stream));
        while (br.readLine() != null) {
            count++;
        }
        br.close();
        return count;
    }

    public static int diffValues(int[] numArray){
        int numOfDifferentVals = 0;

        ArrayList<Integer> diffNum = new ArrayList<>();

        for(int i=0; i<numArray.length; i++){
            if(!diffNum.contains(numArray[i])){
                diffNum.add(numArray[i]);
            }
        }

        if(diffNum.size()==1){
            numOfDifferentVals = 1;//solo hay un label
        }
        else{
            numOfDifferentVals = diffNum.size();
        }

        return numOfDifferentVals;
    }


    private MappedByteBuffer loadModelFile(String modelFilePath) throws IOException {
        FileInputStream inputStream = new FileInputStream(modelFilePath);

        FileChannel fileChannel = inputStream.getChannel();

        return fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, fileChannel.size());
    }

    public static String getTestValues(){

        return "-0.347267568,0.15253742,-0.017794196,-0.11903403,-0.067791812,-0.159793288,-0.292383254,-0.059090886,-0.435069501,0.214652717,-0.28984952,-0.40704447,0.347660422,0.14333874,0.156307414,0.078293495,-0.607468784,-0.55903995,-0.636769176,-0.326753527,-0.107505582,-0.462723285,0.466130227,0.47811681,-0.239892125,-0.186254904,0.198327392,-0.040743113,0.316024423,0.231224805,-0.246672675,0.497131824,-0.249536633,0.078972243,0.085474364,-0.299478143,0.391579032,-0.508919656,-0.440259218,-0.067531757,0.823453844,-0.33142975,-0.310962349,-0.953233361,-0.926698148,-0.932321072,-0.97265619,-0.989906728,-0.94927758,0.788172722,-0.348870456,-0.321732372,0.829429388,-0.330966324,-0.303168923,0.449966341,0.560230494,-0.79957062,-0.800020218,-0.975688934,-0.953061581,-0.923980236,0.999993443,0.998419285,0.99923718,-0.844648838,0.86595726,-0.896617949,0.945576012,-0.891371429,0.893888831,-0.898329973,0.905459642,-0.866523743,0.866609633,-0.86721319,0.883149564,0.929439127,-0.715475976,-0.535743356,0.022383923,0.131704256,0.132532179,-0.02048265,-0.102116674,-0.158511624,-0.127553031,-0.050267808,-0.281530082,-0.568434894,-0.338341504,-0.362359822,-0.251685411,0.290713221,0.019922648,0.003858063,-0.516415775,-0.590383649,-0.634051919,-0.096390642,-0.05992315,-0.198668808,0.210885808,0.542682588,-0.014266027,-0.186096534,0.194480494,-0.077903777,0.081938818,0.178851947,-0.194088295,0.247134373,0.507555664,-0.028183296,0.196629748,-0.114560701,0.014645247,-0.293035597,-0.126553088,-0.047646176,-0.324929416,-0.135592982,-0.444050372,-0.283092767,-0.347635925,-0.03856707,-0.210820273,-0.426614821,-0.043621797,-0.376948208,-0.499144852,-0.244651392,0.364367634,0.591948092,0.347376704,0.111314669,-0.739691913,-0.783542871,-0.527108908,-0.24731721,-0.424731016,0.108169809,0.30133605,0.43934387,0.761064589,-0.159183279,0.162163869,0.03370814,-0.108311601,-0.249767944,0.389677495,-0.221894786,0.071873471,-0.474992484,0.338655055,-0.260857522,0.301272869,0.524085164,0.604802966,0.579622388,0.0502529,0.065752923,0.172109604,-0.166726902,-0.482402951,-0.475591034,-0.222824171,-0.602544785,-0.64590627,-0.429402769,-0.616188109,-0.713134944,0.321339875,0.517694116,0.534461558,-0.228453904,-0.649669528,-0.864610553,-0.859191954,-0.212377384,-0.594929039,-0.645330429,0.606940091,0.462761849,0.256531268,-0.129648745,0.21801284,0.024188541,0.484757692,-0.327921003,0.362304658,-0.358708709,0.513121009,-0.413840204,0.159199536,-0.220035791,0.09379936,0.495012313,-0.034061227,-0.097483955,0.011988561,-0.009044533,-0.210784316,0.085958406,-0.649866939,0.011988561,-0.439013749,-0.239271119,0.360763431,0.172360212,-0.312294483,-0.044246648,0.372335196,0.112248443,-0.877464473,-0.891764045,-0.445834577,0.442758679,0.112248443,0.092766963,-0.890498817,0.991840839,-0.791901529,0.789116383,-0.783525527,0.771520615,0.012124395,0.088203527,-0.087143719,-0.057808507,-0.591064215,0.012124395,-0.421788871,-0.152954489,0.334289908,0.357362509,-0.244994029,-0.095314302,-0.024179095,0.074302673,-0.289828837,-0.249365807,-0.425743431,-0.488275647,0.074302673,-0.476511091,-0.303994566,0.665186226,-0.015603097,0.01145127,0.313972622,-0.463585347,-0.250777513,-0.478707701,-0.276878536,-0.521146894,-0.462617218,-0.250777513,-0.761007726,-0.336331636,0.662772179,0.546682537,-0.132844537,-0.072101884,-0.371171415,-0.008933943,-0.033234332,-0.138194531,-0.158088267,-0.120363772,-0.244923264,0.015374932,-0.184628233,-0.042485442,-0.352444768,-0.289691806,-0.504238605,-0.98369056,-0.472363502,-0.708064079,0.124720678,-0.607468784,-0.55903995,-0.636769176,-0.284758151,-0.07630489,-0.364800602,0.470622152,0.659664869,0.437882036,-0.75,-0.916666687,-0.909090936,0.983106196,0.668686032,0.67359966,-0.267799079,-0.556031048,-0.670177102,-0.843090832,-0.518513322,-0.793157697,-0.505365968,-0.616083205,-0.751754224,-0.510177493,-0.50184238,-0.57045418,-0.691794932,-0.97548759,-0.460060328,-0.672863007,-0.432486773,-0.769222379,-0.455092609,-0.392330408,-0.505365968,-0.616083205,-0.751754224,-0.510177493,-0.50184238,-0.57045418,-0.691794932,-0.97548759,-0.460060328,-0.672863007,-0.432486773,-0.769222379,-0.455092609,-0.392330408,-0.505365968,-0.616083205,-0.751754224,-0.510177493,-0.50184238,-0.57045418,-0.691794932,-0.97548759,-0.460060328,-0.672863007,-0.432486773,-0.769222379,-0.455092609,-0.392330408,0.017878626,-0.037169658,-0.190902099,-0.105034269,-0.160515592,-0.184734613,-0.012522561,-0.342584014,-0.143749118,-0.391025186,-0.038046192,-0.552473485,-0.99181819,-0.74201262,-0.842663109,0.1036679,-0.516415775,-0.590383649,-0.634051919,-0.10197705,-0.398173541,-0.220849752,0.180160552,0.123863474,0.099515051,-0.200000003,-0.400000006,0.039999999,0.971623063,0.84704107,0.859938383,-0.66797477,-0.920455813,0.141458184,-0.148108855,-0.578269839,-0.89229238,-0.712241769,-0.521249056,-0.764869273,-0.476725757,-0.376294196,-0.360899627,-0.434683621,-0.989682853,-0.512350261,-0.640790641,-0.262682676,-0.446388543,-0.523005605,-0.278728664,-0.712241769,-0.521249056,-0.764869273,-0.476725757,-0.376294196,-0.360899627,-0.434683621,-0.989682853,-0.512350261,-0.640790641,-0.262682676,-0.446388543,-0.523005605,-0.278728664,-0.712241769,-0.521249056,-0.764869273,-0.476725757,-0.376294196,-0.360899627,-0.434683621,-0.989682853,-0.512350261,-0.640790641,-0.262682676,-0.446388543,-0.523005605,-0.278728664,-0.205695823,-0.319965065,-0.120944008,-0.314883381,-0.39589259,-0.074307732,-0.402886391,-0.34626013,-0.557304919,-0.330617607,-0.532966375,-0.247885674,-0.705406904,-0.7337116,-0.864724159,-0.001093586,-0.739691913,-0.783542871,-0.527108908,-0.412308782,-0.557277322,-0.590296507,0.529672205,0.683826447,0.290749073,-0.888888896,-0.916666687,-0.909090936,0.56908226,0.732466698,0.604048371,-0.091917008,-0.457350105,-0.407981485,-0.686597109,0.007877713,-0.415962547,-0.526781261,-0.828178465,-0.931339204,-0.843192399,-0.817328572,-0.728815317,-0.882639408,-0.946782172,-0.505385637,-0.908290505,-0.80610168,-0.898981571,-0.493346781,-0.78971529,-0.526781261,-0.828178465,-0.931339204,-0.843192399,-0.817328572,-0.728815317,-0.882639408,-0.946782172,-0.505385637,-0.908290505,-0.80610168,-0.898981571,-0.493346781,-0.78971529,-0.526781261,-0.828178465,-0.931339204,-0.843192399,-0.817328572,-0.728815317,-0.882639408,-0.946782172,-0.505385637,-0.908290505,-0.80610168,-0.898981571,-0.493346781,-0.78971529,-0.216583043,-0.400473267,-0.419484317,-0.109209061,-0.594869971,-0.547258854,-0.337446213,-0.475012362,-0.48960638,-0.096445113,-0.709987342,-0.527917624,-0.804198444,-0.98821187,-0.995693028,-0.209419668,-0.649669528,-0.864610553,-0.859191954,-0.414152741,-0.509010375,-0.505690336,0.214948431,0.20486939,0.104503438,-0.400000006,-0.560000002,-0.400000006,0.875583887,0.992390156,0.995782316,-0.018445475,-0.341020912,-0.627517521,-0.901292443,-0.395490199,-0.7316944,-0.715923905,-0.799018741,-0.925344229,-0.830883443,-0.802158237,-0.691308916,-0.875320613,-0.996296763,-0.744721174,-0.886724174,-0.781163216,-0.890146673,-0.811254621,-0.762131631,-0.715923905,-0.799018741,-0.925344229,-0.830883443,-0.802158237,-0.691308916,-0.875320613,-0.996296763,-0.744721174,-0.886724174,-0.781163216,-0.890146673,-0.811254621,-0.762131631,-0.715923905,-0.799018741,-0.925344229,-0.830883443,-0.802158237,-0.691308916,-0.875320613,-0.996296763,-0.744721174,-0.886724174,-0.781163216,-0.890146673,-0.811254621,-0.762131631,-0.003496672,0.039019994,-0.268029213,0.011988561,-0.809919655,-0.003496672,-0.439013749,-0.386132002,0.658856511,-0.272727281,0.628373265,0.26382041,0.225481689,0.122005142,0.000452865,0.001902983,0.012124395,-0.138387457,0.122005142,-0.421788871,-0.124777421,0.651524901,0.086614177,0.807969987,0.486988842,0.445584744,-0.232503161,0.016556233,-0.535862565,0.074302673,-0.968155801,-0.232503161,-0.476511091,-0.379936308,0.625590324,-0.789473712,0.98943162,0.625199556,0.599344909,-0.417517573,-0.316696852,-0.640614867,-0.250777513,-0.923389375,-0.417517573,-0.761007726,-0.605288327,0.257962674,0.086614177,0.028024931,0.629139721,0.586133242,0.743674636,0.295181006,0.221265137,-0.181000665,-0.524621785,0.31896311,0.23944509,2";

    }
}
